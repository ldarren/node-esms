=head1 ESMS Administrator Manual

This document is the official Administrator's manual for the 
ESMS program. 
It explains how to use the ESMS family of programs to run a fantasy soccer league. 
Familiarity with the ESMS User's Manual is assumed.

=head1 1. General information

You are reading this document, which means that you have dowloaded ESMS and unzipped the
package. If, for some reason you haven't, please do this now. Put everything in a single
directory - I will call it the "working directory", or shortly the work dir. The work dir
contains ESMS programs, configuration files and a "doc/" directory with the documentation.

Some notation: B<administrator> - the person who is in charge of a ESMS league. B<manager> - a person
participating in a league and managing a team.

=head1 2. Tutorial

I think that the best way to learn something is by going through an example.
This section guides you through running a very simple (though a complete !) league. It's trivial and 
will take only a few minutes, but it will get you started quickly with ESMS.

This section swiftly goes through the steps - for an in-depth explanation of the programs
and options involved, see the next section.

=head2 2.1 Preparation

Make sure that you have the latest ESMS package unzipped to your work directory. ESMS programs
are B<console based> - that is, they don't have a GUI but provide a command line interface.
You can work with ESMS from Windows like with any other program, but for some people it is more
convenient to open a command prompt (Start->Run->cmd). Unix/Linux users almost always use a 
command prompt.

Also, make sure you have a text editor at hand. Notepad should do, but it's better to have
something more powerful (for example Scite, Textpad, Ultraedit, GWD, etc). B<Do not> use
Word or Wordpad unless you know very well what you're doing, since 
ESMS understands only plain text files, and those editors usually add special
formatting characters that don't work with ESMS.

=head2 2.2 Creating the rosters

ESMS includes a program that creates rosters, which makes it simpler to initially setup leagues.
The program is called C<roster_creator> and it has a configuration file - roster_creator_cfg.txt
Now run C<roster_creator> - with its default options (which you can modify in roster_creator_cfg.txt).
It should have created 4 new roster files: ss1.txt, ss2.txt, ss3.txt and ss4.txt

Let us now decide on our team names. These are the abbreviations and full team names we will
use:

 mac - Machos FC
 bla - Blade Runners
 esu - ESMS United
 cra - Crazy Insomniacs

First of all, rename the rosters to these abbreviations - the rosters should now be 
mac.txt, bla.txt, esu.txt and cra.txt. You can take a look at the rosters, by the way.
The player names have been randomly generated by C<roster_creator> - they're far from
perfect, but usually you will either let your managers pick their players' names on
their own, or will use real players names for your league. The rosters generated
by C<roster_creator> are good as templates and for testing.

Next, we will set up the full names translation for ESMS. This is done in the main
configuration file - league.dat; you should have this file now in the work dir, open
it with a text editor.

In the bottom of that file there's an Abbreviations section. Insert the abbreviations
there as follows:

 Abbreviations:
 mac = Machos_FC
 bla = Blade_Runners
 esu = ESMS_United
 cra = Crazy_Insomniacs

Now ESMS will know the link between abbreviations and full team names. There is a lot
of other interesting settings in league.dat, but that's for the next section. Note the
underscores in the full teams' names. These replace spaces, just like in players'
names.

=head2 2.3 Generating league schedule

Now we will generate the schedule for our small league. A schedule sets which team plays
which and when. You don't have to do it manually, the C<fixtures> program will help. First,
create a text file named teams.txt - it lists the teams C<fixtures> will use. Edit the
file so it looks like this:

 Machos_FC
 Blade_Runners
 ESMS_United
 Crazy_Insomniacs

Now, run C<fixtures>. It should have generated a schedule 
file named fixtures.txt - this file can be sent to the managers to know what games their
team will play during the league and when. Our fixtures.txt starts like this:

 1.

 Machos_FC - Blade_Runners
 ESMS_United - Crazy_Insomniacs

 2.
 
 ESMS_United - Machos_FC
 Blade_Runners - Crazy_Insomniacs
 
 ... and so on
 ...

So, in the first "week" of the league, Machos_FC plays against Blade_Runners and ESMS_United
hosts Crazy_Insomniacs. 

=head2 2.4 Creating the teamsheets

Now we'd like to run the first week of our league. But we need the teams' managers to send in
teamsheets, and there are no managers yet. So what can you do ? The C<tsc> program is just 
for that - it takes a roster and generates a basic teamsheet for it. The teamsheet isn't too
sophisticated - it has no orders, for example, but it generates correct teamsheets (it won't 
name injured and suspended players).

Run C<tsc> - it asks for a roster name, give it C<mac.txt>, give it also a formation+tactic, for
example C<442N>. It should now create a teamsheet for mac.txt and name it macsht.txt. Take
a look at the teamsheet. Now repeat the same operation for the other 3 teams. At the end you
should have 4 teamsheets, one for each team: macsht.txt, crasht.txt, esusht.txt and blasht.txt

=head2 2.5 Running the games

Now we are finally ready to run the games of the first round in our league. Run C<esms> (the 
main engine). When it asks for a home teamsheet name give it macsht.txt, and for away teamsheet
give it blasht.txt (recall from the schedule that these two teams clash in the first round).
If everything is OK, ESMS will tell you that the game ended successfully. 

Take a look at the commentary file that was created: mac_bla.txt - it lists the game events (note that ESMS inserted the full
team names where appropriate).

Repeat the same to run a game between ESMS_United and Crazy_Insomniacs (run C<esms> with
esusht.txt and crasht.txt as the home and away teamsheets, respectively). You should get another
new file - esu_cra.txt

If you were running a real league now, you'd send each commentary file to the managers of the teams
who played in that match.

=head2 2.6 Updating the league

If you look at the bottom of the commentary files, you will see that players accumulated statistics
(such as goals and key tackles), got cards, lost fitness, etc. All this should be now reflected in
the rosters. Besides, you have to create a summary of the round, and create/update the league 
table. The updating tool C<updtr> does all that. It's as simple as a couple of clicks.

But first you should create a teams listing for the tool to know which teams it should update. Create
a new file - teams.dir (you do this only once for your league !), and put the following into it:

 mac.txt
 bla.txt
 esu.txt
 cra.txt

Now run C<updtr> and select option 6 (full update). When you press Enter, C<updtr> runs and 
gives you a full report of what it did. C<updtr> did many interesting things - it updated
the rosters (you can take a look at them now), and created several new files. table.txt is
the league table, for example. updtr_summary.txt is a summary of the round that is ready to be sent
to the managers, together with reports.txt that lists all the results. Read in the next section
about what goes into these files.

=head2 2.7 That's it

Wasn't it simple ? Running the next rounds is even simpler, because you don't have to do 
all the initializations like changing league.dat and creating the fixtures and teams.dir

What you should remember to do is delete the stats.dir file before the next round, so that
C<updtr> won't do unnecessary updates. When you run the main engine for the next round, it
will create a fresh and relevant stats.dir file. The next section explains everything in
much more detail.

=head1 3. ESMS configuration files

This section explains in detail each configuration file ESMS uses.

=head2 3.1 league.dat

ESMS is highly customizable, which allows every league to tailor it to its specific needs. The
main configuration file in ESMS is C<league.dat>. This file is built from

 key = value

pairs. The keys are not case sensitive, so HOME_BONUS and home_bonus mean the same. The following
are the keys of C<league.dat> ESMS understands:

=over 4

=item * HOME_BONUS

The advantage that a home team has over an away team. The normal values are between 100 and 300. If it's
set to 0, there's no advantage to the home team. If it's negative, there is an advantage to an away team.

=item * CUP

ESMS supports penalty shootouts, for occasions like cup games that end with a draw. This option is
for such occasions. If it doesn't exist in league.dat or is set at 0, all games are considered normal,
not cup games, and penalties won't be run. If it's set to 1, ESMS will ask you after each game whether
to run a penalty shootout. If it's set to 2, ESMS will run the shootout after each game, without asking.

=item * TEAM_STATS_TOTAL

Set this option to 1 if you want team stats (signifying their strengths in defense, midfield and 
attack) to be printed to the end of the commentary each 10 minutes. Usage of this option is 
B<strongly discouraged> in normal league games - use it only if you want to analyze a team's
performance or run test matches.

=item * NUM_SUBS

Amount of substituting players that can be listed in a teamsheet.
By default (when this option isn't present in league.dat), ESMS assumes that the amount of subs
is 7. You can set it to another number if your league has different rules.

=item * SUBSTITUTIONS

Amount of substitutions each team is allowed to perform during a game.
By default, ESMS assumes that it is 3.

=item * DP_FOR_YELLOW

The amount of disciplinary points given for a yellow card.

=item * DP_FOR_RED

The amount of disciplinary points given for a red card.

=item * SUSPENSION_MARGIN

This options is used to decide when players are suspended. The common value leagues use is
10. That means a suspension for each 10 disciplinary points. At 10 DP, a player is suspended
for one game, at 20 DP - for two games, at 30 DP - for three games, and so on.

=item * MAX_INJURY_LENGTH

The longest duration (in weeks) of a player injury.

=item * UPDTR_FITNESS_GAIN

The average amount of fitness points a player gains after a game from getting a rest.

=item * UPDTR_FITNESS_AFTER_INJURY

The average amount of fitness points a player has when he comes back from an injury.

=item * ABILITIES

The "Abilities:" section in league.dat lists the amounts of ability points given 
for different events/statistics. The names of the options are self-explanatory.

=item * ABBREVIATIONS

The "Abbreviations:" section in league.dat lists the links between short and full team 
names in C<short = full> style. The ESMS tools use the short names (usually a 3 letter
abbreviation) for some things, and full names for some things, and this section is 
read to establish the connections.

=back

=head2 3.2 language.dat

ESMS is designed to allow easy translation to languages other than English. The C<language.dat>
file is a single point of reference for language-dependent strings. By translating this file,
people can decide how ESMS prints out game commentaries.

Translation is not the only use of C<language.dat>, however. It also allows to extend the
commentaries ESMS prints, and some leagues inded took advantage of this feature.

Take a look at C<language.dat> - its structure is self-explanatory. Lines starting with C<|>
are comments which explain how to translate each commentary group.

=head2 3.3 tactics.dat

When ESMS runs a game, it computes three major skill totals for each team, and uses 
those to run the simulation. The totals are:

=over 4

=item *

Team tackling - stopping the opponent's attacks.

=item * 

Team passing - creating attacks.

=item *

Team shooting - has two effects: creating attacks (to a lesser extent than team passing), and
scoring goals from these attacks.

=back

To compute these three totals, the contribution of each active player is summed. Each player
(except the GK) contributes to all three totals, depending on his major skills (Tk, Ps, Sh),
team tactic, and other factors (side, fitness, etc). The tactic acts as a multiplier on the
player's major skills. For each position the player plays, the contributions are different.
All these multipliers are set in the C<tactics.dat> configuration file.

The defaults that come with ESMS withstood the testing of time, so it's adviced not to change
them, although that is possible if your league wants to modify tactics or even create new ones.

A sample from C<tactics.dat> will explain its structure:

 # P - Passing
 MULT P DF TK 1.0
 MULT P DF PS 0.75
 MULT P DF SH 0.3 
 
 MULT P DM TK 0.87
 MULT P DM PS 0.87
 MULT P DM SH 0.28
 
 MULT P MF TK 0.25
 MULT P MF PS 1.0
 MULT P MF SH 0.25
 
 MULT P AM TK 0.25
 MULT P AM PS 0.87
 MULT P AM SH 0.68
 
 MULT P FW TK 0.25
 MULT P FW PS 0.75
 MULT P FW SH 1.0
 
 BONUS P L MF SH 0.5
 BONUS P L MF TK 0.5
 BONUS P L FW SH 0.25

There are two types of lines here. MULT lines set the tactic multiplier - for each of the positions
(DF, DM, MF, AM, FW) - each of the contributions (TK, PS, SH). Thus, for example a DF in a team
playing P has his PS contribution multiplied by 0.75. BONUS lines add bonuses to certain tactics
against other tactics.

=head1 4. ESMS programs and the files they work on

ESMS consists of several programs and some files these programs read and write. For each program,
I list the input files it expects and  the output files it generates

Note: Each of the ESMS programs can accept a command line argument C<--no_wait_on_exit> that makes
it exit immediately after finishing, without waiting for you to press Enter. While the waiting is
convenient when running from Windows, people who use ESMS from the command line usually prefer to
supply this argument. For running automatic games, it is essential.

=head2 4.1 C<esms> - the main engine

C<esms> is the main game engine of ESMS. It runs a simulation of a soccer game between two teams,
given their teamsheets and rosters (you can learn in detail about teamsheets and rosters in the 
User's manual).

B<Input>: Configuration files (league.dat, language.dat, tactics.dat), a pair of rosters and
a pair of teamsheets for these rosters.

B<Output>: A commentary file for the game, and adds a line to the reports.txt file, and a line to the
stats.dir file.

=head2 4.2 Commentary files

A commentary file is generated by C<esms> and contains the listing of all major events in the game.
It is intended to be read by humans, and is usually sent to the two managers of the playing teams.
The commentary file also contains a summary of game statistics and changes in players' attributes
which is used by C<updtr> to update the rosters.

=head2 4.3 reports.txt

reports.txt contains a summary of games' results. It is generated by C<esms> and can be sent to
the whole league announcing all the scores in some round. This file is also used when updating
the league table.

=head2 4.4 stats.dir

stats.dir contains a list of commentary files which C<updtr> should use to update the rosters.
C<esms> creates it and adds a line to it for each game it runs. In the end of the round, after
C<updtr> did its updating, this file
should be deleted - it will be regenerated by C<esms> in the next round.

=head2 4.5 teams.dir

teams.dir is simply a list of the rosters that make your league. It should be created only once
in the beginning of your league season. This file is essential for C<updtr> to know which rosters
it should update.

=head2 4.6 C<updtr> - the updating tool

C<updtr> is the second of the two most important tools an ESMS league administrator uses to run
a league. After C<esms> runs all the games, C<updtr> is used to handle all the rest - update the
rosters with player statistics, update the league table with the latest results, and take care
of injuries, suspensions and fitness. C<updtr> can do it all just in a few clicks, and usually
runs smoothly if your league files are set up correctly.

When you run C<updtr> you get the following menu:

 What would you like to do ?
 
 1) Update rosters
 2) Decrease injuries
 3) Decrease suspensions
 4) Update league table
 5) Decrease suspensions + update rosters
 6) Decrease suspensions, injuries + update rosters, league table
 
 Enter your choice ->

This lists the various functions C<updtr> performs, and their combinations to make matters simpler. The
functions are:

B<Update rosters>: C<updtr> looks at all game commentaries listed in stats.dir, and updates
the players' attributes from the played games in the team's rosters. For example, it adds
1 to the "Games played" statistic of all players who played, computes the injury periods of 
newly injured players, etc.

B<Decrease injuries / suspensions>: Players in ESMS are injured for a certain amount of weeks and
suspended for a certain amount of games. C<updtr> takes care to reduce the period of injury/suspension
of each injured/suspended player. These options are separated because in some occasions suspensions
and injuries are not parallel. For instance, in cup games that happen in the middle of the week, injuries
are usually not decreased, but suspensions are.

B<Update league table>: C<updtr> takes table.txt and the latest results from reports.txt and updates
the table. If the table doesn't exist (like in the first league round), C<updtr> just creates it.

The other options are combinations to make working with C<updtr> more efficient. For instance, (6) is
used to update after league rounds - it does everything one needs. Most often, this is the single option
admins use after running league rounds. (5) is often used to run updates after cup games. The multitude
of separate options and their combinations were designed to provide the league administrator with a
maximal level of flexibility.

B<Input>: C<updtr>'s input depends on the function you ask it to perform, but generally it uses:
the configuration file league.dat, stats.dir, teams.dir, commentary files listed in stats.dir,
rosters, reports.txt and table.txt

B<Output>: C<updtr> updates the rosters, table.txt and creates a summary file to be sent to
the league managers - updtr_summary.txt

=head2 4.7 updtr_summary.txt

A summary file created by C<updtr> after each round. This file contains interesting information about
the league round, together with some statistics. It is usually sent to the managers of the league 
after each round.

=head2 4.8 table.txt

This is a standard league table file. For example:

 Pl   Team                    P    W   D   L    GF   GA   GD   Pts
 -----------------------------------------------------------------
 1    Blade Runners           4    2   2   0     3    1    2     8
 2    Crazy Insomniacs        4    2   0   2     5    4    1     6
 3    ESMS United             4    1   2   1     4    3    1     5
 4    Machos FC               4    0   2   2     0    4   -4     2

The columns are: Pl - place, Team - team name, P - games played, W/D/L - games won/drawn/lost, GF - goals
for (how many goals the team scored), GA - goals against (how many goals the team conceded), GD - goal
difference, Pts - points.

=head2 4.9 C<lgtable> - table updating tool

The league table updating ability is so useful that a separate tool exists to handle it. League
administrators don't really need it to run a league, but I include it in the package because some
people find it convenient. C<lgtable> does what C<updtr> does in its table update - it updates table.txt
with results from reports.txt.

B<Input>: table.txt and reports.txt

B<Output>: updates the table.txt

=head2 4.10 C<tsc> - teamsheet creator

C<tsc> assists managers to create template teamsheets. It is given a roster name and a formation+tactic
and creates a teamsheet. Don't expect C<tsc>'s teamsheets to bring you the league title - they are
far from being sophisticated. C<tsc> doens't care about fitness, sides and it doesn't create orders.
But the teamsheets it creates are B<correct> (contain no injured/suspended players) - they will run with C<esms>
so it is useful to just create template teamsheets for your team. Administrators also use C<tsc> to create
teamsheets for managers that forgot to send a teamsheet for some game.

B<Input>: a roster

B<Output>: a teamsheet

=head2 4.11 C<roster_creator> - creator of ESMS rosters

C<roster_creator> creates as many random rosters as you want, using a configuration file - roster_creator_cfg.txt
It is very useful for creating random players and teams.

B<Input>: roster_creator_cfg.txt configuration file

B<Output>: one or more rosters, depending on what's set in the configuration file.

=head2 4.12 roster_creator_cfg.txt

This file sets the configuration options for C<roster_creator> as C<key = value> pairs.

=over 4

=item * n_rosters

The amount of rosters to create.

=item * n_gk, n_df, n_dm, n_mf, n_dm, n_mf, n_am, n_fw

The amount of players to create for each position. C<roster_creator> creates players that are suitable
for certain positions - for example players with high Ps for MF.

=item * average_stamina

The average stamina of players. The actual stamina (and all other "average" options) is created
by a pseudo-random process, and C<roster_creator> tries to fit the average rating to the option
set in the configuration.

=item * average_aggression

The average aggression level of players.

=item * average_main_skill, average_mid_skill, average_secondary_skill

Main skill is the primary skill for each position, like Ps for MFs. Mid skill is the skill
for the DM and AM positions. I.e. mid_skill = 11 means 11 at Tk and Ps for DMs (all in average,
of course). Secondary skill is the non-primary skill of players, like Tk and Ps for FWs.

=item * roster_name_prefix

Given some prefix "xx", C<roster_creator> creates rosters with the names "xx1.txt", "xx2.txt"
and so on.

=item * generate_names

Set this to 1 if you want C<roster_creator> to create randomized names for the players. If this
option is not set, blank spaces will be left in the rosters instead of the names.

=back

=head2 4.13 C<fixtures> - generators of league fixtures/schedule

This program creates a schedule / fixtures list for a league. A league is played in two
rounds, N-1 games in each round (where N is the amount of teams). During a league run,
each team plays each other team twice, once home and once away.

B<Input>: table.txt - list of team names to create the fixtures for. Full names should be listed
here.

B<Output>: a list of fixtures in fixtures.txt

The input and output of this program is so simple that there's no point to list the files
it uses separately. 

=head2 4.14 An essential subset of tools

You probably noticed that the only tools a league administrator I<really> needs are C<esms>
and C<updtr>. All the rest are just auxiliary programs some administrators use, and some
don't. 

=head2 4.15 End of round cleanup

Most of the files created by the ESMS programs during a run of some round are either 
temporaries that are needed to communicate between the tools, or information files that 
are to be sent to the league managers. The files that really last between rounds are 
the configuration files, teams.dir, table.txt and the rosters. 
All the other files are usually deleted after performing 
their purpose, in order not to clutter the league directory. For example, after a round 
is run, the commentary files, reports.txt and stats.dir should be deleted.

=head1 5. Epilogue

=head2 5.1 What's next

That's about it for a guide on ESMS administration. Like with any unfamiliar program, it
may look intimidating at first, but once you get to know it, it is really very simple. When
your league is correctly set up, running the ESMS tools is very simple and only takes a few
moments. Seasoned administrators report that each week the bulk of their time (which isn't
more than a few minutes) goes into fixing mistakes in teamsheets sent in by managers. The
rest of the process - running the games and updates takes almost no time.

So if you are new to ESMS, the best advice I can give is B<practice>. Go through the 
tutorial again, make sure everything makes sense, run a few more rounds, set up a small
test league for friends. Practice brings perfection.

If you need any help at setting up a league, or have any questions and requests regarding
the ESMS programs, feel free to ask me.

=head2 5.2 Contact

This document, as is ESMS itself, was written and is maintained by Eli Bendersky. My email address
is eliben@gmail.com. Feel free to send me comments, feedback and questions. I usually answer emails
very regularly and will be glad to help.

ESMS also has a low-volume, but important mailing list at Yahoo Groups. In the list new features are 
usually discussed, and
people often ask questions and request ideas for their ESMS leagues. To sign to the mailing list,
visit http://groups.yahoo.com and look for C<esms>.

=for html <hr>

Eli Bendersky (eliben@gmail.com)

